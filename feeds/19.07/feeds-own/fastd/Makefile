#
# Copyright (C) 2012-2014 OpenWrt.org
#
# This is free software, licensed under the GNU General Public License v2.
# See /LICENSE for more information.
#

include $(TOPDIR)/rules.mk

PKG_NAME:=fastd
#PKG_VERSION:=1

#file
#PKG_MAINTAINER:=Matthias Schiffer <mschiffer@universe-factory.net>
#PKG_SOURCE:=$(PKG_NAME)-$(PKG_VERSION).tar.xz
#PKG_SOURCE_URL:=https://projects.universe-factory.net/attachments/download/78
#PKG_MD5SUM:=135b3083d2743e335738de3bd4bb0c3c
#git
PKG_SOURCE_PROTO:=git
PKG_SOURCE_URL:=https://github.com/NeoRaider/fastd.git
PKG_REV:=92bc1c105119c08e340045a157e9bace9a04bb6a
PKG_SOURCE_VERSION:=$(PKG_REV)
PKG_SOURCE_SUBDIR:=$(PKG_NAME)-$(PKG_REV)
PKG_SOURCE:=$(PKG_SOURCE_SUBDIR).tar.gz
PKG_BUILD_DIR:=$(BUILD_DIR)/$(PKG_SOURCE_SUBDIR)
PKG_VERSION:=$(PKG_REV)


PKG_CONFIG_DEPENDS:=\
	CONFIG_FASTD_ENABLE_METHOD_CIPHER_TEST \
	CONFIG_FASTD_ENABLE_METHOD_COMPOSED_GMAC \
	CONFIG_FASTD_ENABLE_METHOD_GENERIC_GMAC \
	CONFIG_FASTD_ENABLE_METHOD_GENERIC_POLY1305 \
	CONFIG_FASTD_ENABLE_METHOD_NULL \
	CONFIG_FASTD_ENABLE_CIPHER_AES128_CTR \
	CONFIG_FASTD_ENABLE_CIPHER_NULL \
	CONFIG_FASTD_ENABLE_CIPHER_SALSA20 \
	CONFIG_FASTD_ENABLE_CIPHER_SALSA2012 \
	CONFIG_FASTD_ENABLE_MAC_GHASH \
	CONFIG_FASTD_WITH_CMDLINE_USER \
	CONFIG_FASTD_WITH_CMDLINE_LOGGING \
	CONFIG_FASTD_WITH_CMDLINE_OPERATION \
	CONFIG_FASTD_WITH_CMDLINE_COMMANDS

# IMPORTANT: nacl can be replaced by libsodium. but this would increase size by 110kbyte
#            Also a more efficient chiper 20/12 is not supported by libsodium
PKG_BUILD_DEPENDS:=nacl libuecc libjson-c

include $(INCLUDE_DIR)/package.mk
include $(INCLUDE_DIR)/cmake.mk

define Package/fastd
  CATEGORY:=ddmesh
#  no dependencies to +libuecc +nacl (they are linked, not installed)
  DEPENDS:= +kmod-tun +librt +libpthread +libjson-c
  TITLE:=Fast and Secure Tunneling Daemon
  URL:=https://projects.universe-factory.net/projects/fastd
  SUBMENU:=Packages
endef

define Package/fastd/config
  source "$(SOURCE)/Config.in"
endef

TARGET_CFLAGS += -ffunction-sections -fdata-sections
TARGET_LDFLAGS += -Wl,--gc-sections

CMAKE_OPTIONS += \
	-DCMAKE_BUILD_TYPE:STRING=MINSIZEREL \
	-DWITH_METHOD_CIPHER_TEST:BOOL=FALSE \
	-DWITH_METHOD_COMPOSED_GMAC:BOOL=FALSE \
	-DWITH_METHOD_GENERIC_GMAC:BOOL=FALSE \
	-DWITH_METHOD_GENERIC_POLY1305:BOOL=FALSE \
	-DWITH_METHOD_NULL:BOOL=FALSE \
	-DWITH_CIPHER_AES128_CTR:BOOL=FALSE \
	-DWITH_CIPHER_NULL:BOOL=FALSE \
	-DWITH_CIPHER_SALSA20:BOOL=FALSE \
	-DWITH_CIPHER_SALSA2012:BOOL=FALSE \
	-DWITH_MAC_GHASH:BOOL=FALSE \
	-DWITH_CMDLINE_USER:BOOL=FALSE \
	-DWITH_CMDLINE_LOGGING:BOOL=FALSE \
	-DWITH_CMDLINE_OPERATION:BOOL=FALSE \
	-DWITH_CMDLINE_COMMANDS:BOOL=FALSE \
	-DWITH_CAPABILITIES:BOOL=FALSE \
	-DENABLE_SYSTEMD:BOOL=FALSE \
	-DENABLE_LIBSODIUM:BOOL=FALSE \
	-DENABLE_LTO:BOOL=TRUE


ifeq ($(CONFIG_FASTD_ENABLE_METHOD_CIPHER_TEST),y)
CMAKE_OPTIONS += -DWITH_METHOD_CIPHER_TEST:BOOL=TRUE
endif

ifeq ($(CONFIG_FASTD_ENABLE_METHOD_COMPOSED_GMAC),y)
CMAKE_OPTIONS += -DWITH_METHOD_COMPOSED_GMAC:BOOL=TRUE
endif

ifeq ($(CONFIG_FASTD_ENABLE_METHOD_GENERIC_GMAC),y)
CMAKE_OPTIONS += -DWITH_METHOD_GENERIC_GMAC:BOOL=TRUE
endif

ifeq ($(CONFIG_FASTD_ENABLE_METHOD_GENERIC_POLY1305),y)
CMAKE_OPTIONS += -DWITH_METHOD_GENERIC_POLY1305:BOOL=TRUE
endif

ifeq ($(CONFIG_FASTD_ENABLE_METHOD_NULL),y)
CMAKE_OPTIONS += -DWITH_METHOD_NULL:BOOL=TRUE
endif


ifeq ($(CONFIG_FASTD_ENABLE_CIPHER_AES128_CTR),y)
CMAKE_OPTIONS += -DWITH_CIPHER_AES128_CTR:BOOL=TRUE
endif

ifeq ($(CONFIG_FASTD_ENABLE_CIPHER_NULL),y)
CMAKE_OPTIONS += -DWITH_CIPHER_NULL:BOOL=TRUE
endif

ifeq ($(CONFIG_FASTD_ENABLE_CIPHER_SALSA20),y)
CMAKE_OPTIONS += -DWITH_CIPHER_SALSA20:BOOL=TRUE
endif

ifeq ($(CONFIG_FASTD_ENABLE_CIPHER_SALSA2012),y)
CMAKE_OPTIONS += -DWITH_CIPHER_SALSA2012:BOOL=TRUE
endif


ifeq ($(CONFIG_FASTD_ENABLE_MAC_GHASH),y)
CMAKE_OPTIONS += -DWITH_MAC_GHASH:BOOL=TRUE
endif


ifeq ($(CONFIG_FASTD_WITH_CMDLINE_USER),y)
CMAKE_OPTIONS += -DWITH_CMDLINE_USER:BOOL=TRUE
endif

ifeq ($(CONFIG_FASTD_WITH_CMDLINE_LOGGING),y)
CMAKE_OPTIONS += -DWITH_CMDLINE_LOGGING:BOOL=TRUE
endif

ifeq ($(CONFIG_FASTD_WITH_CMDLINE_OPERATION),y)
CMAKE_OPTIONS += -DWITH_CMDLINE_OPERATION:BOOL=TRUE
endif

ifeq ($(CONFIG_FASTD_WITH_CMDLINE_COMMANDS),y)
CMAKE_OPTIONS += -DWITH_CMDLINE_COMMANDS:BOOL=TRUE
endif


define Package/fastd/description
 Fast and secure tunneling daemon, which is optimized on small code size and few dependencies
endef

# ddmesh: not used
#define Package/fastd/conffiles
#/etc/config/fastd
#endef

define Package/fastd/install
	$(INSTALL_DIR) $(1)/usr/bin
	$(INSTALL_BIN) $(PKG_INSTALL_DIR)/usr/bin/fastd $(1)/usr/bin/

# ddmesh: not used
#	$(INSTALL_DIR) $(1)/etc/init.d/
#	$(INSTALL_BIN) files/fastd.init $(1)/etc/init.d/fastd
#	$(INSTALL_DIR) $(1)/etc/config
#	$(INSTALL_CONF) files/fastd.config $(1)/etc/config/fastd
#	$(INSTALL_DIR) $(1)/etc/fastd
endef

$(eval $(call BuildPackage,fastd))
