diff -ruNp -x .svn -x CVS vtun-3.0.3.orig/auth.c vtun-3.0.3/auth.c
--- vtun-3.0.3.orig/auth.c	2009-05-15 07:23:39.000000000 +0000
+++ vtun-3.0.3/auth.c	2014-05-03 18:12:51.000000000 +0000
@@ -17,7 +17,7 @@
  */
 
 /*
- * $Id: auth.c,v 1.9.2.4 2009/04/24 09:15:33 mtbishop Exp $
+ * $Id: auth.c,v 1.9.2.3 2008/01/07 22:35:18 mtbishop Exp $
  */ 
 
 /*
@@ -169,13 +169,8 @@ char *bf2cf(struct vtun_host *host)
      if( host->flags & VTUN_KEEP_ALIVE )
 	*(ptr++) = 'K';
 
-     if( host->flags & VTUN_ENCRYPT ) {
-        if (host->cipher == VTUN_LEGACY_ENCRYPT) { /* use old flag method */
-	   ptr += sprintf(ptr,"E");
-	} else {
-	   ptr += sprintf(ptr,"E%d", host->cipher);
-	}
-     }
+     if( host->flags & VTUN_ENCRYPT )
+	ptr += sprintf(ptr,"E%d", host->cipher);
 
      strcat(ptr,">");
 
@@ -343,6 +338,8 @@ struct vtun_host * auth_server(int fd)
 	        if( !strcmp(str1,"HOST") ){
 		   host = strdup(str2);
 
+           	   vtun_syslog(LOG_INFO,"client: [%s]", str2 );
+
 		   gen_chal(chal_req);
 		   print_p(fd,"OK CHAL: %s\n", cl2cs(chal_req));
 
diff -ruNp -x .svn -x CVS vtun-3.0.3.orig/cfg_file.y vtun-3.0.3/cfg_file.y
--- vtun-3.0.3.orig/cfg_file.y	2012-07-09 01:01:08.000000000 +0000
+++ vtun-3.0.3/cfg_file.y	2014-05-03 18:12:51.000000000 +0000
@@ -18,7 +18,7 @@
  */
 
 /*
- * $Id: cfg_file.y,v 1.8.2.6 2012/07/09 01:01:08 mtbishop Exp $
+ * $Id: cfg_file.y,v 1.8.2.2 2008/01/07 22:35:22 mtbishop Exp $
  */ 
 
 #include "config.h"
@@ -71,7 +71,7 @@ int yyerror(char *s);
 }
 %expect 20
 
-%token K_OPTIONS K_DEFAULT K_PORT K_BINDADDR K_PERSIST K_TIMEOUT
+%token K_OPTIONS K_DEFAULT K_PORT K_BINDADDR K_PERSIST K_TIMEOUT K_IFNAME
 %token K_PASSWD K_PROG K_PPP K_SPEED K_IFCFG K_FWALL K_ROUTE K_DEVICE 
 %token K_MULTI K_SRCADDR K_IFACE K_ADDR
 %token K_TYPE K_PROT K_NAT_HACK K_COMPRESS K_ENCRYPT K_KALIVE K_STAT
@@ -141,6 +141,11 @@ options:
 
 /* Don't override command line options */
 option:  '\n'
+  | K_IFNAME WORD	{
+			  free(vtun.ifname);
+			  vtun.ifname = strdup($2);
+			}
+
   | K_PORT NUM 		{ 
 			  if(vtun.bind_addr.port == -1)
 			     vtun.bind_addr.port = $2;
diff -ruNp -x .svn -x CVS vtun-3.0.3.orig/cfg_kwords.h vtun-3.0.3/cfg_kwords.h
--- vtun-3.0.3.orig/cfg_kwords.h	2010-04-14 08:41:15.000000000 +0000
+++ vtun-3.0.3/cfg_kwords.h	2014-05-03 18:12:51.000000000 +0000
@@ -17,7 +17,7 @@
  */
 
 /*
- * $Id: cfg_kwords.h,v 1.6.2.4 2009/04/24 09:15:35 mtbishop Exp $
+ * $Id: cfg_kwords.h,v 1.6.2.2 2008/01/07 22:35:26 mtbishop Exp $
  */ 
 
 extern int lineno;
@@ -61,6 +61,7 @@ struct kword cfg_keyword[] = {
    { "keepalive",K_KALIVE }, 
    { "stat",	 K_STAT }, 
    { "syslog",   K_SYSLOG },
+   { "ifname",   K_IFNAME },
    { NULL , 0 }
 };
 
diff -ruNp -x .svn -x CVS vtun-3.0.3.orig/configure vtun-3.0.3/configure
--- vtun-3.0.3.orig/configure	2009-03-29 10:08:48.000000000 +0000
+++ vtun-3.0.3/configure	2014-05-03 18:12:51.000000000 +0000
@@ -341,9 +341,9 @@ bindir='${exec_prefix}/bin'
 sbindir='${exec_prefix}/sbin'
 libexecdir='${exec_prefix}/libexec'
 datadir='${prefix}/share'
-sysconfdir='${prefix}/etc'
+sysconfdir='/etc'
 sharedstatedir='${prefix}/com'
-localstatedir='${prefix}/var'
+localstatedir='/var'
 libdir='${exec_prefix}/lib'
 includedir='${prefix}/include'
 oldincludedir='/usr/include'
@@ -6538,7 +6538,7 @@ echo "${ECHO_T}" >&6
 
 
 REL=`echo 'BRANCH-3_X' | tr -d '$: \-' | sed 's/^[A-Za-z]*//' | sed 's/\_/\./'`
-
+REL='3.0.3 - patched by me (Stephan)'
 
 cat >>confdefs.h <<_ACEOF
 #define VTUN_VER "$REL `date '+%m/%d/%Y'`"
diff -ruNp -x .svn -x CVS vtun-3.0.3.orig/main.c vtun-3.0.3/main.c
--- vtun-3.0.3.orig/main.c	2012-07-08 05:32:57.000000000 +0000
+++ vtun-3.0.3/main.c	2014-05-03 18:12:51.000000000 +0000
@@ -17,7 +17,7 @@
  */
 
 /*
- * $Id: main.c,v 1.9.2.5 2012/07/08 05:32:57 mtbishop Exp $
+ * $Id: main.c,v 1.9.2.2 2008/01/07 22:35:53 mtbishop Exp $
  */ 
 
 #include "config.h"
@@ -66,6 +66,9 @@ int main(int argc, char *argv[], char *e
      vtun.cfg_file = VTUN_CONFIG_FILE;
      vtun.persist = -1;
      vtun.timeout = -1;
+
+     vtun.ifname = NULL;
+     vtun.process_name = NULL;
 	
      /* Dup strings because parser will try to free them */
      vtun.ppp   = strdup("/usr/sbin/pppd");
@@ -79,6 +82,7 @@ int main(int argc, char *argv[], char *e
      vtun.bind_addr.port = -1;
      vtun.svr_type = -1;
      vtun.syslog   = LOG_DAEMON;
+     vtun.ifname = strdup(""); //free() is called somewhere 
 
      /* Initialize default host options */
      memset(&default_host, 0, sizeof(default_host));
@@ -91,8 +95,8 @@ int main(int argc, char *argv[], char *e
 
      /* Start logging to syslog and stderr */
      openlog("vtund", LOG_PID | LOG_NDELAY | LOG_PERROR, LOG_DAEMON);
-
-     while( (opt=getopt(argc,argv,"misf:P:L:t:npq")) != EOF ){
+     /* option -I <name> gibt den process namen an damit ich die verschiedenen vtund unterscheiden kann */
+     while( (opt=getopt(argc,argv,"misf:P:L:t:npqI:")) != EOF ){
 	switch(opt){
 	    case 'm':
 	        if (mlockall(MCL_CURRENT | MCL_FUTURE) < 0) {
@@ -125,6 +129,8 @@ int main(int argc, char *argv[], char *e
 	        break;
 	    case 'q':
 		vtun.quiet = 1;
+	    case 'I':
+		vtun.process_name = strdup(optarg);
 		break;
 	    default:
 		usage();
@@ -198,14 +204,20 @@ int main(int argc, char *argv[], char *e
         sa.sa_handler=reread_config;
         sigaction(SIGHUP,&sa,NULL);
 
-        init_title(argc,argv,env,"vtund[s]: ");
+	if(vtun.process_name)
+        	init_title(argc,argv,env,vtun.process_name);
+	else
+        	init_title(argc,argv,env,"vtund[s]: ");
 
 	if( vtun.svr_type == VTUN_STAND_ALONE )	
 	   write_pid();
 	
 	server(sock);
      } else {	
-        init_title(argc,argv,env,"vtund[c]: ");
+	if(vtun.process_name)
+        	init_title(argc,argv,env,vtun.process_name);
+	else
+        	init_title(argc,argv,env,"vtund[c]: ");
         client(host);
      }
 
diff -ruNp -x .svn -x CVS vtun-3.0.3.orig/tun_dev.c vtun-3.0.3/tun_dev.c
--- vtun-3.0.3.orig/tun_dev.c	1970-01-01 00:00:00.000000000 +0000
+++ vtun-3.0.3/tun_dev.c	2014-05-03 18:12:51.000000000 +0000
@@ -0,0 +1,230 @@
+/*  
+    VTun - Virtual Tunnel over TCP/IP network.
+
+    Copyright (C) 1998-2008  Maxim Krasnyansky <max_mk@yahoo.com>
+
+    VTun has been derived from VPPP package by Maxim Krasnyansky. 
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+ */
+
+/*
+ * $Id: tun_dev.c,v 1.4.2.1 2008/01/07 22:36:22 mtbishop Exp $
+ */ 
+
+#include "config.h"
+
+#include <unistd.h>
+#include <fcntl.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include <string.h>
+#include <syslog.h>
+#include <errno.h>
+
+#include <sys/ioctl.h>
+#include <sys/socket.h>
+#include <linux/if.h>
+#include <linux/sockios.h>
+
+#include "vtun.h"
+#include "lib.h"
+
+//this function is used on old systems. It renames the interface via its own 
+//fd. NOT TESTED
+//IN: name - prefix of interface (e.g. tap not tap0)
+//OUT: name - interface with number that was successful
+static void rename_if(char* name)
+{
+  struct ifreq r;
+  int  ctl_fd, k;
+  char newname[IFNAMSIZ + 1];
+  char n[4];
+           
+          if(vtun.ifname && *vtun.ifname)
+          {
+            vtun_syslog(LOG_DEBUG,"VTUN: ifname=%s\n", vtun.ifname);	
+
+            if ((ctl_fd = socket(PF_INET, SOCK_DGRAM, 0)) < 0)
+            {
+              vtun_syslog(LOG_ERR, "VTUN: Cannot open control_fd\n"); 
+            }
+            else
+            {  
+	      /* try to rename interface until it has success */
+	      for(k=0; k < 255; k++)
+              {
+                strncpy(newname, vtun.ifname, IFNAMSIZ);
+
+                /* truncate to reserve space for number and '\0' */
+                newname[IFNAMSIZ-3]='\0';
+                sprintf(n,"%ld", k); 
+                strcat(newname,n); 
+
+                vtun_syslog(LOG_DEBUG,"VTUN: newname=%s\n", newname);	
+
+                strncpy(r.ifr_name, name, IFNAMSIZ);
+                strncpy(r.ifr_newname, newname, IFNAMSIZ);
+                if (ioctl(ctl_fd, SIOCSIFNAME, &r) >= 0)
+                  strncpy(name, newname, IFNAMSIZ); 
+              }
+              close(ctl_fd);
+            }
+          }
+}
+
+/* 
+ * Allocate TUN device, returns opened fd. 
+ * Stores dev name in the first arg(must be large enough).
+ */  
+static int tun_open_common0(char *dev, int istun)
+{
+    char tunname[14];
+    int i, fd, err;
+
+    if( *dev ) {
+       sprintf(tunname, "/dev/%s", dev);
+       vtun_syslog(LOG_INFO,"VTUN: used ifname=%s\n", dev);	
+       return open(tunname, O_RDWR);
+    }
+
+    sprintf(tunname, "/dev/%s", istun ? "tun" : "tap");
+    err = 0;
+    for(i=0; i < 255; i++){
+       sprintf(tunname + 8, "%d", i);
+       /* Open device */
+       if( (fd=open(tunname, O_RDWR)) > 0 ) {
+
+          strcpy(dev, tunname + 5);
+	  rename_if(dev);
+
+          vtun_syslog(LOG_INFO,"VTUN: used ifname=%s\n", dev);	
+
+          return fd;
+       }
+       else if (errno != ENOENT)
+          err = errno;
+       else if (i)	/* don't try all 256 devices */
+          break;
+    }
+    if (err)
+	errno = err;
+    return -1;
+}
+
+#ifdef HAVE_LINUX_IF_TUN_H /* New driver support */
+#include <linux/if_tun.h>
+
+#ifndef OTUNSETNOCSUM
+/* pre 2.4.6 compatibility */
+#define OTUNSETNOCSUM  (('T'<< 8) | 200) 
+#define OTUNSETDEBUG   (('T'<< 8) | 201) 
+#define OTUNSETIFF     (('T'<< 8) | 202) 
+#define OTUNSETPERSIST (('T'<< 8) | 203) 
+#define OTUNSETOWNER   (('T'<< 8) | 204)
+#endif
+
+static int tun_open_common(char *dev, int istun)
+{
+    struct ifreq ifr;
+    int fd;
+
+    if ((fd = open("/dev/net/tun", O_RDWR)) < 0)
+       return tun_open_common0(dev, istun);
+
+    memset(&ifr, 0, sizeof(ifr));
+    ifr.ifr_flags = (istun ? IFF_TUN : IFF_TAP) | IFF_NO_PI;
+    if (*dev)
+    {
+       strncpy(ifr.ifr_name, dev, IFNAMSIZ);
+
+       if (ioctl(fd, TUNSETIFF, (void *) &ifr) < 0) {
+          if (errno == EBADFD) {
+	     /* Try old ioctl */
+ 	     if (ioctl(fd, OTUNSETIFF, (void *) &ifr) < 0) 
+	        goto failed;
+          } else
+             goto failed;
+       } 
+    }
+    else
+    {
+      char newname[IFNAMSIZ + 1];
+      char n[4];
+      int k;
+
+      if(vtun.ifname && *vtun.ifname)
+      {
+	/* try to rename interface until it has success */
+	for(k=0; k < 255; k++)
+        {
+          strncpy(newname, vtun.ifname, IFNAMSIZ);
+
+          /* truncate to reserve space for number and '\0' */
+          newname[IFNAMSIZ-3]='\0';
+          sprintf(n,"%ld", k); 
+          strcat(newname,n); 
+
+          vtun_syslog(LOG_DEBUG,"VTUN: check ifname=%s\n", newname);	
+
+          strncpy(ifr.ifr_name, newname, IFNAMSIZ);
+          if (ioctl(fd, TUNSETIFF, (void *) &ifr) < 0) {
+             if (errno == EBADFD) { /* Try old ioctl */
+ 	        if (ioctl(fd, OTUNSETIFF, (void *) &ifr) >= 0) 
+                   break;
+             }
+             continue;
+          } 
+          break;
+        }//for
+        if(k==255)
+	  goto failed;
+      }//if vtun.ifname 
+      else
+      { //get ifname with same function: returned in ifr.ifr_name
+       if (ioctl(fd, TUNSETIFF, (void *) &ifr) < 0) {
+          if (errno == EBADFD) {
+	     /* Try old ioctl */
+ 	     if (ioctl(fd, OTUNSETIFF, (void *) &ifr) < 0) 
+	        goto failed;
+          } else
+             goto failed;
+       } 
+      }//else vtun.ifname
+    } 
+
+    strcpy(dev, ifr.ifr_name);
+    vtun_syslog(LOG_INFO,"VTUN: use if name=%s\n", dev);	
+    return fd;
+
+failed:
+    close(fd);
+    return -1;
+}
+
+#else
+
+# define tun_open_common(dev, type) tun_open_common0(dev, type)
+
+#endif /* New driver support */
+
+int tun_open(char *dev) { return tun_open_common(dev, 1); }
+int tap_open(char *dev) { return tun_open_common(dev, 0); }
+
+int tun_close(int fd, char *dev) { return close(fd); }
+int tap_close(int fd, char *dev) { return close(fd); }
+
+/* Read/write frames from TUN device */
+int tun_write(int fd, char *buf, int len) { return write(fd, buf, len); }
+int tap_write(int fd, char *buf, int len) { return write(fd, buf, len); }
+
+int tun_read(int fd, char *buf, int len) { return read(fd, buf, len); }
+int tap_read(int fd, char *buf, int len) { return read(fd, buf, len); }
diff -ruNp -x .svn -x CVS vtun-3.0.3.orig/vtun.h vtun-3.0.3/vtun.h
--- vtun-3.0.3.orig/vtun.h	2012-07-09 01:01:08.000000000 +0000
+++ vtun-3.0.3/vtun.h	2014-05-03 18:12:51.000000000 +0000
@@ -17,7 +17,7 @@
  */
 
 /*
- * $Id: vtun.h,v 1.12.2.7 2012/07/09 01:01:08 mtbishop Exp $
+ * $Id: vtun.h,v 1.12.2.3 2008/01/07 22:36:07 mtbishop Exp $
  */ 
 
 #ifndef _VTUN_H
@@ -204,6 +204,8 @@ extern llist host_list;
 struct vtun_opts {
    int  timeout;
    int  persist;
+   char *ifname;
+   char *process_name;
 
    char *cfg_file;
 
