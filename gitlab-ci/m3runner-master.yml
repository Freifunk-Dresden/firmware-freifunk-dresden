######## m3runner ################

# dl and workdir symlinks are removed by gitlab for each job
# so I need to recreate this
#  - ln -s ~/mycache/dl
#  - ln -s ~/mycache/workdir

m3:init:
  only:
    - master
  stage: init       # special state, run before all other stages
  script:
    - ln -s ~/mycache/dl
    - ln -s ~/mycache/workdir
  # ensure that we have no old data. This is important when
  # generating download.json. Else all old openwrt images would be
  # included and mixed

    - echo "FF_GITLAB_REMOVE_DL = [${FF_GITLAB_REMOVE_DL}]"
    - echo "FF_GITLAB_REMOVE_WORKDIR = [${FF_GITLAB_REMOVE_WORKDIR}]"
    - echo "FF_UPLOAD_DIR = [${FF_UPLOAD_DIR}]"

  # dont delete dl, it is not so important to have different old version for
  # one packges, but it will reduce download overhead from external servers
  # every night. so just only delete workdirs to always have a clean build
    - test "${FF_GITLAB_REMOVE_DL}" = "1" && rm -rf ~/mycache/dl/*
    - test "${FF_GITLAB_REMOVE_WORKDIR}" = "1" && rm -rf ~/mycache/workdir/*
    - /bin/true
  tags:
    - m3runner

m3:ar71xx.tiny.lowmem:
  only:
    - master
  stage: build
  needs: ["m3:init"]
  script:
    - ln -s ~/mycache/dl
    - ln -s ~/mycache/workdir
    - ./build.sh ar71xx.tiny.lowmem rerun -j"$(( $(nproc) + 1))"
  tags:
    - m3runner

m3:ar71xx.generic.lowmem:
  only:
    - master
  stage: build
  needs: ["m3:init"]
  script:
    - ln -s ~/mycache/dl
    - ln -s ~/mycache/workdir
    - ./build.sh ar71xx.generic.lowmem rerun -j"$(( $(nproc) + 1))"
  tags:
    - m3runner

m3:x86.64.offloader:
  only:
    - master
  stage: build
  needs: ["m3:init"]
  script:
    - ln -s ~/mycache/dl
    - ln -s ~/mycache/workdir
    - ./build.sh x86.64.offloader rerun -j"$(( $(nproc) + 1))"
  tags:
    - m3runner

m3:ramips:
  only:
    - master
  stage: build
  needs: ["m3:init"]
  script:
    - ln -s ~/mycache/dl
    - ln -s ~/mycache/workdir
    - ./build.sh ramips.* rerun -j"$(( $(nproc) + 1))"
  tags:
    - m3runner

m3:ipq40xx:
  only:
    - master
  stage: build
  needs: ["m3:init"]
  script:
    - ln -s ~/mycache/dl
    - ln -s ~/mycache/workdir
    - ./build.sh ipq40xx.* rerun -j"$(( $(nproc) + 1))"
  tags:
    - m3runner

m3:lantiq:
  only:
    - master
  stage: build
  needs: ["m3:init"]
  script:
    - ln -s ~/mycache/dl
    - ln -s ~/mycache/workdir
    - ./build.sh lantiq.* rerun -j"$(( $(nproc) + 1))"
  tags:
    - m3runner

m3:ath79:
  only:
    - master
  stage: build
  needs: ["m3:init"]
  script:
    - ln -s ~/mycache/dl
    - ln -s ~/mycache/workdir
    - ./build.sh ath79.* rerun -j"$(( $(nproc) + 1))"
  tags:
    - m3runner

m3:sunxi:
  only:
    - master
  stage: build
  needs: ["m3:init"]
  script:
    - ln -s ~/mycache/dl
    - ln -s ~/mycache/workdir
    - ./build.sh sunxi.* rerun -j"$(( $(nproc) + 1))"
  tags:
    - m3runner

m3:mpc85xx:
  only:
    - master
  stage: build
  needs: ["m3:init"]
  script:
    - ln -s ~/mycache/dl
    - ln -s ~/mycache/workdir
    - ./build.sh mpc85xx.* rerun -j"$(( $(nproc) + 1))"
  tags:
    - m3runner

m3:mediatek:
  only:
    - master
  stage: build
  needs: ["m3:init"]
  script:
    - ln -s ~/mycache/dl
    - ln -s ~/mycache/workdir
    - ./build.sh mediatek.* rerun -j"$(( $(nproc) + 1))"
  tags:
    - m3runner

m3:test:
  only:
    - master
  stage: test
  needs: ["m3:ar71xx.tiny.lowmem","m3:ar71xx.generic.lowmem","m3:x86.64.offloader","m3:ramips","m3:lantiq","m3:ath79","m3:ipq40xx","m3:sunxi","m3:mpc85xx","m3:mediatek"]
  artifacts:
    paths:
      # keep this as artifact, so I can compare it also when building firmware on gitlab
      # other artifacts are not needed (waste of disk storage), because they are uploaded to download server
      - upload-infos/fileinfo.json.new-generated
  script:
    - ln -s ~/mycache/dl
    - ln -s ~/mycache/workdir
    - ./build.sh list
    # generate upload-infos/fileinfo.json.new-generated and let store it also on error
    # "all" needed to copy all firmware to output from which
    # the json is generated
    - ./gen-upload.sh all || true
  tags:
    - m3runner

m3:upload:
  # do not use 'manual' job, because the build result may
  # have gone (overwritten by following builds) in /mycache/...

  only:
    - master
  stage: deploy
  needs: ["m3:test"]
  script:
    - echo "FF_UPLOAD_DIR = [${FF_UPLOAD_DIR}]"
    - ln -s ~/mycache/dl
    - ln -s ~/mycache/workdir
    - ./gen-upload.sh all
    - |
      # gitlab-runner's public ssh key must added to /home/deploy-firmware/.ssh/authorized_keys.
      # On download server there is a user "deploy-firmware" who owns the download directories.
      if [ -n "${FF_UPLOAD_DIR}" ]; then
        rsync -avz --info=all1 --delete -EH --progress final_output/*/* deploy-firmware@download.intern:/var/www/files/firmware/${FF_UPLOAD_DIR}/
      fi
      rm -rf final_output

  tags:
  - m3runner
