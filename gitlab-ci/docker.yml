####### docker ############

# re-create symlinks because gitlab removes it before starting each single job.
# /builds/dl is an empty directory created during docker image creation.
# This directory is used as mount point to pass in /mycache from host machine.
# I use this to avoid downloading/cloning from openwrt.org for each commit
# to gitlab.freifunk-dresden.de
# "before_script" can be global or local to a job. but
# but then it is same as if I put the command just before build command.
# when "before_script" is global, then all global before_scripts are
# executed independent of any job or runner (without any tags)


default:
  # image is on hub.docker.com. NOTE: always specify a tag and do not use latest!
  # this is because if a latest image is already on host, this is not updated automatically.
  # Using tags always ensures that the correct build environment is used
  image: freifunkdresden/openwrt-docker-build:v6

docker:init:
  except:
    - schedules
    - master
    - /^T_/
    - /^TESTING/
    - /^R_/
  stage: init
  script:
    - echo "FF_GITLAB_REMOVE_DL = [${FF_GITLAB_REMOVE_DL}]"
    - echo "FF_GITLAB_REMOVE_WORKDIR = [${FF_GITLAB_REMOVE_WORKDIR}]"
    - echo "FF_UPLOAD_DIR = [${FF_UPLOAD_DIR}]"
    - mkdir -p /mycache/dl
    - ln -s /mycache/dl
    - mkdir -p /mycache/workdir
    - ln -s /mycache/workdir
    - test "${FF_GITLAB_REMOVE_DL}" = "1" && rm -rf ~/mycache/dl/*
    - test "${FF_GITLAB_REMOVE_WORKDIR}" = "1" && rm -rf ~/mycache/workdir/*
    - /bin/true
  tags:
    - docker

docker:ar71xx.tiny.lowmem:
  except:
    - schedules
    - master
    - /^T_/
    - /^TESTING/
    - /^R_/
  stage: build
  needs: ["docker:init"]
  script:
    - mkdir -p /mycache/dl
    - ln -s /mycache/dl
    - mkdir -p /mycache/workdir
    - ln -s /mycache/workdir
    - ./build.sh ar71xx.tiny.lowmem rerun -j"$(( $(nproc) + 1))"
  tags:
  - docker


docker:ar71xx.generic.lowmem:
  except:
    - schedules
    - master
    - /^T_/
    - /^TESTING/
    - /^R_/
  stage: build
  needs: ["docker:init"]
  script:
    - mkdir -p /mycache/dl
    - ln -s /mycache/dl
    - mkdir -p /mycache/workdir
    - ln -s /mycache/workdir
    - ./build.sh ar71xx.generic.lowmem rerun -j"$(( $(nproc) + 1))"
  tags:
  - docker

docker:x86.64.offloader:
  except:
    - schedules
    - master
    - /^T_/
    - /^TESTING/
    - /^R_/
  stage: build
  needs: ["docker:init"]
  script:
    - mkdir -p /mycache/dl
    - ln -s /mycache/dl
    - mkdir -p /mycache/workdir
    - ln -s /mycache/workdir
    - ./build.sh x86.64.offloader rerun -j"$(( $(nproc) + 1))"
  tags:
  - docker


docker:ramips:
  except:
    - schedules
    - master
    - /^T_/
    - /^TESTING/
    - /^R_/
  stage: build
  needs: ["docker:init"]
  script:
    - mkdir -p /mycache/dl
    - ln -s /mycache/dl
    - mkdir -p /mycache/workdir
    - ln -s /mycache/workdir
    - ./build.sh ramips.* rerun -j"$(( $(nproc) + 1))"
  tags:
  - docker


docker:lantiq:
  except:
    - schedules
    - master
    - /^T_/
    - /^TESTING/
    - /^R_/
  stage: build
  needs: ["docker:init"]
  script:
    - mkdir -p /mycache/dl
    - ln -s /mycache/dl
    - mkdir -p /mycache/workdir
    - ln -s /mycache/workdir
    - ./build.sh lantiq.* rerun -j"$(( $(nproc) + 1))"
  tags:
  - docker

docker:ath79:
  except:
    - schedules
    - master
    - /^T_/
    - /^TESTING/
    - /^R_/
  stage: build
  needs: ["docker:init"]
  script:
    - mkdir -p /mycache/dl
    - ln -s /mycache/dl
    - mkdir -p /mycache/workdir
    - ln -s /mycache/workdir
    - ./build.sh ath79.* rerun -j"$(( $(nproc) + 1))" V=s
  tags:
  - docker

docker:ipq40xx:
  except:
    - schedules
    - master
    - /^T_/
    - /^TESTING/
    - /^R_/
  stage: build
  needs: ["docker:init"]
  script:
    - mkdir -p /mycache/dl
    - ln -s /mycache/dl
    - mkdir -p /mycache/workdir
    - ln -s /mycache/workdir
    - ./build.sh ipq40xx.* rerun -j"$(( $(nproc) + 1))"
  tags:
  - docker

docker:sunxi:
  except:
    - schedules
    - master
    - /^T_/
    - /^TESTING/
    - /^R_/
  stage: build
  needs: ["docker:init"]
  script:
    - mkdir -p /mycache/dl
    - ln -s /mycache/dl
    - mkdir -p /mycache/workdir
    - ln -s /mycache/workdir
    - ./build.sh sunxi.* rerun -j"$(( $(nproc) + 1))"
  tags:
  - docker

docker:mpc85xx:
  except:
    - schedules
    - master
    - /^T_/
    - /^TESTING/
    - /^R_/
  stage: build
  needs: ["docker:init"]
  script:
    - mkdir -p /mycache/dl
    - ln -s /mycache/dl
    - mkdir -p /mycache/workdir
    - ln -s /mycache/workdir
    - ./build.sh mpc85xx.* rerun -j"$(( $(nproc) + 1))"
  tags:
  - docker

docker:mediatek:
  except:
    - schedules
    - master
    - /^T_/
    - /^TESTING/
    - /^R_/
  stage: build
  needs: ["docker:init"]
  script:
    - mkdir -p /mycache/dl
    - ln -s /mycache/dl
    - mkdir -p /mycache/workdir
    - ln -s /mycache/workdir
    - ./build.sh mediatek.* rerun -j"$(( $(nproc) + 1))"
  tags:
  - docker

# gen-upload.sh is not possible, because images are generated on different runners and I want to avoid
# wasting memory on m3-server when other users create branches and compile
